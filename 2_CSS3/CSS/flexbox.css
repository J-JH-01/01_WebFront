div{
    border : 1px solid black;
    box-sizing: border-box;
    /* content + padding + border 합으로 width/height 지정 */
}


.item{
    width: 75px;
    height: 75px;
}


.item1{background-color: red;}
.item2{background-color: orangered;}
.item3{background-color: orange;}
.item4{background-color: yellow;}
.item5{background-color: yellowgreen;}
.item6{background-color: green;}
.item7{background-color: lightblue;}
.item8{background-color: blue;}
.item9{background-color: violet;}

/* felxbox 중 부모요소 */
.flex-container{
    height: 800px;
    /* 부모요소에게 주는 CSS속성 
        이 요소를 flexbox로 만들겠다*/

    display: flex;
    /* flex 속성을 주면 자식요소들이 row 상태로 정렬됨 */

    /* flex-direction (부모 전용 속성)*****중요***** */
    /* 메인축의 방향과 시작 위치를 지정하는 속성 */

    /* ctrl + / -> 커서 있는 라인 주석처리 */


    /* 행 방향 메인축 (가로,기본값)
        flex-direction: row;
   
        열 방향 메인축(세로)
        flex-direction: column; 

        행방향 메인축 + 순서 역순
        flex-direction: row-reverse;

        열 방향 메인축 + 순서 역순
        flex-direction: column-reverse;

        메인축이 행이면 교차축은 열방향, 메인축이 열이면 교차축은 행방향 */



        /* flex-wrap (부모 전용 속성) */
        /* 내부 item들을 포장하는 속성 
            item 들이 강제로 한줄에 배치되게 할지
            한줄을 벗어나서 여러 줄로 배치할 것인지 지정        
        */

        /* 창을 줄였다 커졌다 해봐야 속성이 보임 */
        /* item을 한줄로 배치(기본값) 
            flex-wrap: nowrap;

            item을 여러줄로 배치
            flex-wrap: wrap;
            부모 박스의 높이에서 절반째에다가 배치를해줌

            item을 여러줄로 배치 (역순)
            flex-wrap: wrap-reverse; */



        /* justify-content (부모 전용)
            메인축 방향으로 item의 정렬 방법을 조정함 

            메인축 방향으로 앞에붙어서 정렬(기본값)
            justify-content: flex-start;

            메인축 방향으로 뒤에붙어서 정렬
            justify-content: flex-end;

            메인축 방향으로 가운데 정렬
            justify-content: center;

            item 주위에 메인축 방향 양쪽으로 일정한 크기의 공간을 추가 (요소간 칸띄워줌)
            ->양끝은 조금, item 중간 사이사이는 넓게 떨어짐
            ->브라우저 크기에 따라 변함
            justify-content:space-around;

            item이 메인축 내에서 동일한 간격을 가짐
            ->양끝과 사이 전부 동일한 여백
            justify-content: space-evenly; 

            양끝을 붙인 상태에서 item들의 간격을 일정하게 정렬
            justify-content: space-between;*/


      
        /* align-items: (부모 전용 속성);
            item들을 교차축 방향으로 정렬하는 방법을 지정하는 속성
    

            교차축 앞에서부터 정렬 (기본값)
            align-items: flex-start; 
            
            교차축 끝에 붙어서 정렬
            align-items: flex-end; 

            교차축 가운데 정렬
            align-items: center; */


            /* 메인축을 열방향으로 바꾸고 내용 다시 테스트해보기 */
            /* flex-direction: column; */

}


/* 요소 정가운데 배치하기 */
#con {
    width: 450px;
   height: 450px;

   display: flex;

   /* 메인축 가운데 정렬 */
   justify-content: center;

   /* 교차축 가운데 정렬 */
   align-items: center;
}

 #center {
    width: 80px;
    height: 80px;
    background-color: red;
 }

/* item(자식)에게 주는 flex 속성 */
.basis-20{
    /* auto(기본값)
        요소 본래의 크기만큼만 가짐

        0 : 본래 요소의 크기 중 content 영역만을 남겨두고 차지하는 영역 없음
    */
    /* flex-basis: auto; */
    flex-basis: 20%;}

.basis-30 {flex-basis: 30%;}
.basis-50 {flex-basis: 50%;}

/* flex-grow */
/* 0 기본값 : 
     item이 추가적인 가용공간을 차지하지 않음 
     자신의 초기 크기만을 유지*/

     /* 설정값은 여백의 비율로 적용됨 */
.grow1{flex-grow : 1}
.grow2{flex-grow : 2}
.grow3{flex-grow : 1}

/* flex-슈링크
    1 (기본값) :
        컨테이너 크기가 줄어들면 다른 항목들과 함께 비율적으로 축소될 수 있음을 의미, 동일비율
    */

.shrink1{flex-shrink: 1;}
.shrink2{flex-shrink: 0;}
/* 0 : 항목(item) 줄어들지 않음을 의미
    -> 컨테이너의 크기가 줄어들어도 비율이 축소되지 않음
*/

/* flex */
.flex-test1 {
    flex: 1;
    /* flex-grow: 1;
        flex-shrink:1; -> 줄어들때도 비율1로 가져가겠다 라는 뜻
        flex-basis: 0%; -> 나 없는셈 치고 grow에 따라가라는 뜻*/
 }

 .flex-test2{
    flex: 1 1 auto;
     /* flex-grow: 1;
        flex-shrink:1;
        flex-basis: auto; ->grow 이외의 자신 크기를 유지*/
 }

 .flex-test3{
    flex: 1 500px;
     /* flex-grow: 1;
        flex-shrink:1; 
        flex-basis: 500px;
        -item의 기본 크기가 500px로 설정됨(grow 이외의 자신 스스로의 공간)*/
 }
 


 /* Order */
 /* order의 기본값은 0 
    -기본 순서를 유지함
    -정수값을 가질 수 있고, 양수,0,음수 가능(값이 작을 수록 앞으로 이동)
 */
 .order:nth-child(1) { order: 3;} /* A */
 .order:nth-child(2) { order: 2;} /* B */
 .order:nth-child(3) { order: 1;} /* C */





















